# The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

# Let us list the factors of the first seven triangle numbers:

#  1: 1
#  3: 1,3
#  6: 1,2,3,6
# 10: 1,2,5,10
# 15: 1,3,5,15
# 21: 1,3,7,21
# 28: 1,2,4,7,14,28
# We can see that 28 is the first triangle number to have over five divisors.

# What is the value of the first triangle number to have over five hundred divisors?


#get sequence of triangle number -> (1..n).inject(&:+)
#find factors of the sequence
#if count of the factors is greater than 500 return sequence

def number_factors(num)
  factors=0
  (1..num).each do |x|
    factors+=1 if num%x==0
  end
  factors
end

def triangle_number(num)
  (1..num).inject(&:+)
end

def triangle_number_with_over_x_factors(x) 
  start=1
  while number_factors(triangle_number(start)) <=x
    start+=1
    puts  "#{number_factors(triangle_number(start))} : #{triangle_number(start)}"
  end
  triangle_number(start)
end

